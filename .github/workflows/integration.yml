# Run secret-dependent integration tests only after /ok-to-test approval
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  repository_dispatch:
    types: [ok-to-test-*]
name: Primary Tests
jobs:
  # Branch-based pull request
  trusted-internal:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py_version: ["3.8", "3.7", "3.6"]
        distro: ["alpine", "debian"]
    env:
      UID: "1001"
      PY_VERSION: ${{ matrix.py_version }}
      DISTRO: ${{ matrix.distro }}
      SAMPLE_MESSAGE: ${{ secrets.SAMPLE_MESSAGE }}
    steps:
    - name: Branch based PR checkout
      uses: actions/checkout@v2
    # <insert integration tests needing secrets>
    - run: docker-compose up --build --exit-code-from app
    
  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  trusted-fork:
    if: 
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py_version: ["3.8", "3.7", "3.6"]
        distro: ["alpine", "debian"]
    env:
      UID: "1001"
      PY_VERSION: ${{ matrix.py_version }}
      DISTRO: ${{ matrix.distro }}
      SAMPLE_MESSAGE: ${{ secrets.SAMPLE_MESSAGE }}
    steps:
    # Check out merge commit
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v2
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'
    # <insert integration tests needing secrets>
    - run: docker-compose up --build --exit-code-from app
    - run: env
    # Update check run called "integration-fork"
    - uses: actions/github-script@v1
      id: update-check-run
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
        conclusion: ${{ job.status }} 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;
          const { data: checks } = await github.checks.listForRef({
            ...context.repo,
            ref
          });
          const check = checks.check_runs.filter(c => c.name === process.env.job);
          const { data: result } = await github.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });
          return result;

  untrusted:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    steps:
    - name: Fail tests if not yet approved by a maintainer
      run: exit 1